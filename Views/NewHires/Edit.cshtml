@model IT_Control_Tower.NewHire

@{
    ViewBag.Title = "Edit";

}
<div>
    <ol class="breadcrumb" style="position:fixed;width:100%;z-index:999;">
        <li>@Html.ActionLink("Home", "Index", "Home")</li>
        <li>@Html.ActionLink("HAM", "Index", "HAM")</li>
        <li>@Html.ActionLink("New Hires", "Index", "NewHires")</li>
    </ol>
</div>
<div class="container" style="margin-top:4rem;">
    <h2>Edit</h2>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>NewHire</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.SESA)

            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Computer, "", new { @class = "text-danger" })
                </div>
               
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Assignee, "Assignee", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Assignee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Box, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Box, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Computer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.Computer, new SelectList(
               new List<SelectListItem>
    {
        new SelectListItem { Selected = false, Text = "Not Ready", Value = "not ready"},
        new SelectListItem { Selected = false, Text = "Ready for Collection", Value = "ready for collection"}
    }, "Value", "Text", Model.Computer)
               , new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Headset, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.Headset, new SelectList(
               new List<SelectListItem>
    {
             new SelectListItem { Selected = false, Text = "Not Ready", Value = "not ready"},
        new SelectListItem { Selected = false, Text = "Ready for Collection", Value = "ready for collection"}
    }, "Value", "Text", Model.Headset)
               , new { @class = "form-control" })

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Printer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.Printer, new SelectList(
               new List<SelectListItem>
    {
        new SelectListItem { Selected = true, Text = "Set Up", Value = "set up"},
        new SelectListItem { Selected = false, Text = "Not Set Up", Value = "not set up"}
    }, "Value", "Text", Model.Printer)
               , new { @class = "form-control" })
                </div>
            </div>

            <!--<div class="form-group">
                @Html.LabelFor(model => model.Statuses, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">-->
                    @*@Html.EditorFor(model => model.Statuses, new { htmlAttributes = new { @class = "form-control" } })*@
                    <!--<span>Pass:&nbsp;&nbsp;</span>@Html.RadioButtonFor(m => m.Statuses, "Pass")
                    <br />
                    <span>Fail:&nbsp;&nbsp;&nbsp;&nbsp;</span>@Html.RadioButtonFor(m => m.Statuses, "Fail")

                </div>
            </div>-->

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" style="background-color:#009e4d; color:white" />
                </div>
            </div>
        </div>
 
        <input type="button" class="btn btn-info" value="Back to List" onclick="location.href='@Url.Action("Index")'" style="background-color:#009e4d;" />


}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

